precision mediump float;

varying vec3 normalVector;
varying vec2 fragmentTextureCoordinate;
varying vec3 vertexLocation;
varying vec3 cameraLocation;

uniform sampler2D baseColorTexture;
uniform sampler2D metallicRoughnessTexture;
uniform samplerCube environmentTexture;

float noise(float seed){
return abs(fract(sin(seed*365.0)*365.0));
}

vec3 hash(vec3 seed){
float base = fract(noise(seed.x)+noise(seed.y)+noise(seed.z));
return vec3(noise(seed.x+base),noise(seed.y+base),noise(seed.z+base));
}

vec3 cameraDirection(vec3 vertexCoord, vec3 cameraCoord){
return normalize(vertexCoord - cameraCoord);
//return vec3(1.0,1.0,0.0);
}

void main()
{
  vec4 baseColor = texture2D(baseColorTexture,fragmentTextureCoordinate);
  vec4 metallicRoughness = texture2D(metallicRoughnessTexture,fragmentTextureCoordinate);
  float roughness = metallicRoughness.y;
  float metallic = metallicRoughness.z;
  vec3 cameraVector = cameraDirection(vertexLocation,cameraLocation);
  vec4 reflect1 = textureCube(environmentTexture,reflect(cameraVector,roughness*normalVector+(hash(vertexLocation))));
  vec4 reflect2 = textureCube(environmentTexture,reflect(cameraVector,roughness*normalVector+(hash(vertexLocation.yzx))));
  vec4 reflect3 = textureCube(environmentTexture,reflect(cameraVector,roughness*normalVector+(hash(vertexLocation.zxy))));
  vec4 reflect0 = baseColor*(reflect1+reflect2+reflect3)/3.0;

  vec4 surfaceReflect = (reflect1+reflect2+reflect3)/3.0;
  vec4 surfaceBaseColor = baseColor*(textureCube(environmentTexture,reflect(cameraDirection(vertexLocation,cameraLocation),normalVector+(hash(vertexLocation))))+textureCube(environmentTexture,reflect(cameraDirection(vertexLocation,cameraLocation),normalVector+(hash(vertexLocation))))+textureCube(environmentTexture,reflect(cameraDirection(vertexLocation,cameraLocation),normalVector+(hash(vertexLocation)))))/3.0;
  float reflectRate = length(cross(cameraVector,normalVector));
  //float reflectRate = 0.5;
  vec4 surfaceColor = reflectRate*surfaceReflect+(1.0-reflectRate)*surfaceBaseColor;

  gl_FragColor = metallic*reflect0+(1.0-metallic)*surfaceColor;
  //gl_FragColor = vec4(0.0,0.0,0.0,1.0);
}
